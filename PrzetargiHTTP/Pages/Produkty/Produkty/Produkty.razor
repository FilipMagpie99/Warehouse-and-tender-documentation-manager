@page "/produkty"
@using InzynierkaAPI
@using PrzetargiHTTP.Data
@using InzynierkaAPI.Models
@inject ProduktyService produktyService
@inject PrzetargiService przetargiService
@inject NavigationManager NavManager
@inject IJSRuntime jsr

@if (produkty == null)
{
	<div class="d-flex align-items-center justify-content-center" style="height: 80vh">
    <div style="max-width:500px;">
	<p><h4> <i class="fa fa-spinner fa-spin" aria-hidden="true"></i> Ładowanie...</h4></p>
	</div>
	</div>
}
else
{


		<div class="card">
		<h2 class="card-header text-white" style="background-color: #6E2B69 ;">Katalog produktów</h2>

		<div class="row">
			<div class="col ">
				<button class="btn btn-primary ms-2 mt-2" @onclick="AddProdukt">Dodaj produkt</button>

				</div>
							<div class="col"></div>
<div class="col">
				<div class="mt-2"></div>

		<EditForm Model="parametr">
			<input class="form-control mr-sm-2" type="search" placeholder="Nazwa" @bind-value="parametr.nazwaProduktu" aria-label="Search">
			<input class="form-control mr-sm-2" type="search" placeholder="Kategoria" @bind-value="parametr.typProduktu" aria-label="Search">
			<input class="form-control mr-sm-2" type="search" placeholder="Dostawca" @bind-value="parametr.dostawca" aria-label="Search">
			<input class="form-control mr-sm-2" type="search" placeholder="Producent" @bind-value="parametr.producent" aria-label="Search">
			<div class="mt-2"></div>
			<button class="btn btn-secondary my-2 my-sm-0 mt-2" type="submit" @onclick="async () => await FindProdukty(parametr.nazwaProduktu,parametr.typProduktu,parametr.producent)">Szukaj <i class="fa fa-search"></i></button>
			<button class="btn btn-secondary my-2 my-sm-0 mt-2" type="submit" @onclick=@Reset>Resetuj <i class="fa fa-refresh"></i></button>
		</EditForm>
			</div>

						<div class="col"></div>
			<div class="col mt-3 me-2">

				<EditForm Model="itemsOnPage">
					<label>Ilość przetargów na stronie: </label>
					<InputSelect id="items" @bind-Value=itemsOnPage class="form-control" itemid="a">
						<option value="5"> 5</option>
						<option value="10"> 10</option>
						<option value="20"> 20</option>
						<option value="50"> 50</option>
						<option value="100"> 100</option>
					</InputSelect>
					<button class="btn btn-primary mt-2" @onclick="async () => await OnValueChanged(itemsOnPage)">Zmień</button>
				</EditForm>
			</div>
								</div>
		<div class="row mt-2"></div>


		<div class="table-responsive mt-3">
		<table>
			<thead>
				<tr>
						<th class="text-left" style="background-color: #6E2B69 ;">Nazwa</th>
						<th class="text-left" style="background-color: #6E2B69 ;">Jednostka miary</th>
						<th class="text-left" style="background-color: #6E2B69 ;">Ilość</th>
						<th class="text-left" style="background-color: #6E2B69 ;">Kategoria</th>
						<th class="text-left" style="background-color: #6E2B69 ;">Producent</th>
						<th style="background-color: #6E2B69 ;"> </th>
				</tr>
			</thead>
			<tbody>
				@foreach (var produkt in produkty)
				{
					<tr>
						<td class="text-left">@produkt.Nazwa</td>
						<td class="text-left">@produkt.JednostkaMiary</td>
						<td class="text-left">@produkt.Suma</td>
						<td class="text-left">@produkt.TypProduktu</td>
						<td class="text-left">@produkt.Producent.Nazwa</td>
						<td><button class="btn btn-primary btn-sm" @onclick="() => GetByIdProduktu(produkt.Id)">Zmień stan magazynowy</button></td>
					</tr>
				}
			</tbody>
		</table>
	</div>
<div class="container">
					<div class="row">
						<div class="col">
						</div>
						<div class="col text-center">
							<button class="btn oi oi-arrow-left" @onclick="PrevPage"></button>
						</div>
						<div class="col text-center">
							<p class=" custom-font custom-size">@Strona</p>
						</div>
						<div class="col text-center">
							<button class="btn oi oi-arrow-right" @onclick="NextPage"></button>
						</div>
												<div class="col">
</div>
					</div>
				</div>
	</div>
}

@code {
	private Produkt[] produkty;
	private Produkt[] produktyForLastPage;
	public class Parametr
	{
		public string nazwaProduktu { get; set; }
		public string typProduktu { get; set; }
		public string dostawca { get; set; }
		public string producent { get; set; }
	}
	Parametr parametr = new();
	public string p { get; set; }
	private int itemsOnPage { get; set; } = 5;
	public int Strona
	{
		get => strona;
		set
		{
			if (value < 1)
			{
				return;
			}
			if (value > ostatniaStrona)
			{
				return;
			}
			strona = value;
			GetAll(null, null);
		}
	}
	private int strona = 1;
	private int ostatniaStrona { get; set; }
	private int iloscProduktow { get; set; }

	private void NextPage() => Strona++;
	private void PrevPage() => Strona--;

	private async void GetAll(MouseEventArgs e, object sender)
	{
		produkty = null;
		StateHasChanged();
		await OnInitializedAsync();
		StateHasChanged();
	}

	private void NavigateToMagazyn(int id)
	{
		NavManager.NavigateTo($"/Magazyn/{id}");
	}
	private async Task OnValueChanged(int value)
	{
		await produktyService.ChangeNumberOfItemsP(value);
		await OnInitializedAsync();
		StateHasChanged();
	}
	private void GetByIdProduktu( int id) { 

		NavManager.NavigateTo($"/getprodukt/{id}");
	}

	private void AddProdukt(){
		NavManager.NavigateTo("/AddProdukt");
	}
	private async Task Delete(int id)
	{
		await produktyService.DeleteProdukt(id);
		produkty = null;
		await OnInitializedAsync();
	}
	public async void Reset()
	{
		parametr.typProduktu = null;
		parametr.dostawca = null;
		parametr.producent = null;
		parametr.nazwaProduktu = null;
		await FindProdukty(null, null, null);
		StateHasChanged();
	}
	protected override async Task OnInitializedAsync()
	{
		if (przetargiService.isLogged == false)
			NavManager.NavigateTo("/");
		produktyForLastPage = await produktyService.GetProduktyForLastPage();
		iloscProduktow = produktyForLastPage.Length;
		ostatniaStrona = (int)Math.Ceiling((double)iloscProduktow / itemsOnPage);
		produkty = await produktyService.GetAllProdukty(Strona);
	}
	private async Task FindProdukty(string nazwaProduktu, string typProduktu, string producent)
	{
		produkty = await produktyService.FindProdukt(Strona, nazwaProduktu, typProduktu, producent);
	}


}
