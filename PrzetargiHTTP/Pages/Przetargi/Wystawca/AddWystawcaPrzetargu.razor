@page "/addwystawca"
@using InzynierkaAPI
@using InzynierkaAPI.Models
@using PrzetargiHTTP.Data
@inject PrzetargiService przetargiService
@inject NavigationManager NavManager
@inject IJSRuntime jsr

<div class="card">
	<h3 class="card-header bg-success text-white">Nowy organizator</h3>

<EditForm Model="@wystawcaPrzetargu" OnValidSubmit="@HandleValidSubmit" class="form-inline rounded shadow">
	        <div class="card-body">

	<DataAnnotationsValidator />
	<ValidationSummary />



				<p class="text-danger">@error?.Trim('\"')</p>

				<div class="input-group mb-3 mt-3">
					<input type="text" class="form-control" @bind="krsnumber" placeholder="Wprowadź numer KRS firmy, dane zostaną pobrane automatycznie"  aria-describedby="basic-addon2">
					<div class="input-group-append">
						<input type="button" @onclick="async() => await DownloadFromKrs(krsnumber)" class="btn btn-danger" value="Pobierz dane z KRS" />
					</div>
				</div>


				<h5 class="mt-2">Nazwa firmy</h5>
				<InputText @bind-Value="wystawcaPrzetargu.Nazwa" class="form-control" name="Nazwafirmy" />


					<h5 class="mt-2">Krs</h5>
					<InputText class="form-control bg-light" @bind-Value="wystawcaPrzetargu.Krs" />

				<h5 class="mt-2">Nip</h5>
				<InputText class="form-control" @bind-Value="wystawcaPrzetargu.Nip" />
 		

					<h5 class="mt-2">Ulica</h5>
					<InputText class="form-control bg-light" @bind-Value="wystawcaPrzetargu.Ulica" />


					<h5 class="mt-2">Numer domu</h5>
					<InputText class="form-control bg-light" @bind-Value="wystawcaPrzetargu.NrDomu" />


					<h5 class="mt-2">Kod pocztowy</h5>
					<InputText class="form-control bg-light" @bind-Value="wystawcaPrzetargu.KodPocztowy" />


			<h5 class="mt-2">Miejscowość</h5>
					<InputText class="form-control bg-light" @bind-Value="wystawcaPrzetargu.Miejscowosc" />
					<div class="row"></div>

			<button class="btn btn-success mt-3 " type="submit">Utwórz</button>

		<p class="mt-3"></p>



		</div>

</EditForm>
</div>
@code {
	private WystawcaPrzetargu wystawcaPrzetargu = new();
	private string krsnumber { get; set; }
	private KrsApi krsApi = new();
	private string error { get; set; }


	private async Task HandleValidSubmit(){
		error = string.Empty;
		error = await przetargiService.AddWystawcaPrzetargu(wystawcaPrzetargu);
		if (error == string.Empty)
			GoBack();
	}
	private async void GoBack()
	{
		await jsr.InvokeVoidAsync("history.back");
	}
	protected override async Task OnInitializedAsync()
	{
		if (przetargiService.isLogged == false)
			NavManager.NavigateTo("/");
		await Task.CompletedTask;
	}

	private async Task DownloadFromKrs(string krsnumber)
	{
		error = string.Empty;
		Object response = await przetargiService.GetFirmaFromKrs(krsnumber);
		krsApi = response as KrsApi;
		if (krsApi == null)
			error = response as string;
		else{
		wystawcaPrzetargu.Nazwa = krsApi.odpis.dane.dzial1.danePodmiotu.nazwa;
		wystawcaPrzetargu.Nip = krsApi.odpis.dane.dzial1.danePodmiotu.identyfikatory.nip;
		wystawcaPrzetargu.Krs = krsApi.odpis.naglowekA.numerKRS;
		wystawcaPrzetargu.Ulica = krsApi.odpis.dane.dzial1.siedzibaIAdres.adres.ulica;
		wystawcaPrzetargu.NrDomu = krsApi.odpis.dane.dzial1.siedzibaIAdres.adres.nrDomu;
		wystawcaPrzetargu.KodPocztowy = krsApi.odpis.dane.dzial1.siedzibaIAdres.adres.kodPocztowy;
		wystawcaPrzetargu.Miejscowosc = krsApi.odpis.dane.dzial1.siedzibaIAdres.adres.miejscowosc;
		}
	}



}
