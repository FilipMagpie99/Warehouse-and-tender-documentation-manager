@page "/wystawcy"
@using InzynierkaAPI
@using PrzetargiHTTP.Data
@using InzynierkaAPI.Models
@inject PrzetargiService przetargiService
@inject NavigationManager NavManager
@inject IJSRuntime jsr


@if (wystawcy == null)
{
	<div class="d-flex align-items-center justify-content-center" style="height: 80vh">
    <div style="max-width:500px;">
	<p><h4> <i class="fa fa-spinner fa-spin" aria-hidden="true"></i> Ładowanie...</h4></p>
	</div>
	</div>
}
else
{
		<div class="card">
		<h2 class="card-header text-white" style="background-color: #2B6E55;">Organizatorzy</h2>
		<div class="row">
			<div class="col ">
				<button class="btn btn-primary ms-2 mt-2"  @onclick="AddWystawca">Dodaj organizatora</button>
			</div>
			<div class="col"></div>

	<div class="col">
		<div class="mt-2"></div>
	<EditForm Model="parametr">
		<input class="form-control mr-sm-2" type="search" placeholder="Nazwa firmy lub Miejscowość" @bind-value="parametr.nazwaWystawcy" aria-label="Search">
		<input class="form-control mr-sm-2" type="search" placeholder="Numer NIP lub KRS" @bind-value="parametr.nip" aria-label="Search">
		<div class="mt-2"></div>
		<button class="btn btn-secondary my-2 my-sm-0 mt-2" type="submit" @onclick="async () => await FindWystawca(parametr.nazwaWystawcy,parametr.nip)">Szukaj <i class="fa fa-search"></i></button>
		<button class="btn btn-secondary my-2 my-sm-0 mt-2" type="submit" @onclick=@Reset>Resetuj <i class="fa fa-refresh"></i></button>
	</EditForm>

			</div>
			<div class="col"></div>
			<div class="col mt-3 me-2">

				<EditForm Model="itemsOnPage">
					<label>Ilość przetargów na stronie: </label>
					<InputSelect id="items" @bind-Value=itemsOnPage class="form-control" itemid="a">
						<option value="5"> 5</option>
						<option value="10"> 10</option>
						<option value="20"> 20</option>
					</InputSelect>
					<button class="btn btn-primary mt-2" @onclick="async () => await OnValueChanged(itemsOnPage)">Zmień</button>
				</EditForm>
			</div>

		</div>

			<div class="row mt-3"></div>

			<table>
		<thead>
			<tr>


				<th style="background-color: #2B6E55;" >Nazwa firmy</th>
					<th style="background-color: #2B6E55;">Krs</th>
					<th style="background-color: #2B6E55;">Nip</th>
					<th style="background-color: #2B6E55;">Ulica</th>
					<th style="background-color: #2B6E55;">Numer domu</th>
					<th style="background-color: #2B6E55;">Kod pocztowy</th>
					<th style="background-color: #2B6E55;">Miejscowość</th>
				<th style="background-color: #2B6E55;"> </th>



			</tr>
		</thead>
		<tbody>

			@foreach (var wystawca in wystawcy)
			{
				<tr>

					<td>@wystawca.Nazwa</td>
					<td>@wystawca.Krs</td>
					<td>@wystawca.Nip</td>
					<td>@wystawca.Ulica</td>
					<td>@wystawca.NrDomu</td>
					<td>@wystawca.KodPocztowy</td>
					<td>@wystawca.Miejscowosc</td>
					<td><button class="btn btn-primary btn-sm" @onclick="() => GetbyId(wystawca.Id)">Szczegóły</button></td>
				</tr>
			}
		</tbody>
	</table>
<div class="container">
    <div class="row">
			<div class="col"></div>

			<div class="col"><button class="btn oi oi-arrow-left" @onclick="PrevPage"></button></div>
			<div class="col"><p>@Strona</p></div>
			<div class="col">	<button class="btn oi oi-arrow-right" @onclick="NextPage"></button></div>

		</div>
	</div>
		</div>
	
}
@code {
	private WystawcaPrzetargu[] wystawcy;
	private WystawcaPrzetargu[] wystawcyLastPage;
	public int Strona
	{
		get => strona;
		set
		{
			if (value < 1)
			{
				return;
			}
			if (value > ostatniaStrona)
			{
				return;
			}
			strona = value;
			GetAll(null, null);
		}
	}
	private int strona = 1;
	private int ostatniaStrona { get; set; }
	private int itemsOnPage { get; set; } = 5;
	private int iloscWystawcow { get; set; }
	private void NextPage() => Strona++;
	private void PrevPage() => Strona--;

	public class Parametr
	{
		public string nazwaWystawcy { get; set; }
		public string nip { get; set; }
	}
	Parametr parametr = new();

	private async void GetAll(MouseEventArgs e, object sender)
	{
		wystawcy = null;
		StateHasChanged();
		await OnInitializedAsync();
		StateHasChanged();
	}
	private async Task OnValueChanged(int value)
	{
		await przetargiService.ChangeNumberOfItemsW(value);
		await OnInitializedAsync();
		StateHasChanged();
	}
	private async Task FindWystawca(string nazwaWystawcy, string nip)
	{
		wystawcy = await przetargiService.FindWystawca(Strona, nazwaWystawcy, nip);
	}
	private void AddWystawca()
	{
		NavManager.NavigateTo("/addwystawca");
	}
	protected override async Task OnInitializedAsync()
	{
		if (przetargiService.isLogged == false)
			NavManager.NavigateTo("/");
		wystawcy = await przetargiService.GetAllWystawcy(Strona);
		wystawcyLastPage = await przetargiService.GetWystawcyForLastPage();
		iloscWystawcow = wystawcyLastPage.Length;
		ostatniaStrona = (int)Math.Ceiling((double)iloscWystawcow / itemsOnPage);
	}
	public async void Reset()
	{
		parametr.nazwaWystawcy = null;
		parametr.nip = null;
		await FindWystawca(null, null);
		StateHasChanged();
	}
	private void GetbyId(int id)
	{
		NavManager.NavigateTo($"/Wystawca/{id}");
	}



}
